<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.project.board.model.dao.BoardMapper2">
	
	
		<resultMap type="Board" id="board_rm">
		<id property="boardNo" column="BOARD_NO"/>
		<result property="boardTitle" column="BOARD_TITLE"/>
		<result property="boardContent" column="BOARD_CONTENT"/>
		<result property="boardCreateDate" column="B_CREATE_DATE"/>
		<result property="boardUpdateDate" column="B_UPDATE_DATE"/>
		<result property="readCount" column="READ_COUNT"/>
		<result property="commentCount" column="COMMENT_COUNT"/>
		<result property="likeCount" column="LIKE_COUNT"/>
		<result property="memberNickname" column="MEMBER_NICKNAME"/>
		
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="profileImage" column="PROFILE_IMG"/>
		
		<result property="thumbnail" column="THUMBNAIL"/>
		
		
		<!-- collection 태그
			select로 조회된 결과를 collection(list)에 담아
			지정된 필드에 세팅
			
			property : List를 담을 DTO의 필드명
			select : 실행할 select의 id
			column : 조회 결과 중 지정된 컬럼의 값을 파라미터로 전달
		 	javaType : List(컬렉션)의 타입을 지정
		 	ofType : List(컬렉션)의 제네릭(타입 제한) 지정
		 -->
		<collection property="imageList" select="selectImageList"
					column="BOARD_NO"
					javaType="java.util.ArrayList" 
					ofType="BoardImage"/>
					
		<collection property="commentList" select="selectCommentList"
					column="BOARD_NO"
					javaType="java.util.ArrayList" 
					ofType="Comment"/>
		
	</resultMap>
	
	<!-- BoardImage resultMap -->
		<resultMap type="BoardImage" id="boardImage_rm">
		<id property="imageNo" column="IMG_NO"/>
		<result property="imagePath" column="IMG_PATH"/>
		<result property="imageReName" column="IMG_RENAME"/>
		<result property="imageOriginal" column="IMG_ORIGINAL"/>
		<result property="imageOrder" column="IMG_ORDER"/>
		<result property="boardNo" column="BOARD_NO"/>
		
		</resultMap>
		
		   <!-- Comment resultMap -->
   <resultMap type="Comment" id="comment_rm">
      <id property="commentNo" column="COMMENT_NO"/>
      <result property="commentContent" column="COMMENT_CONTENT"/>
      <result property="commentCreateDate" column="C_CREATE_DATE"/>
      <result property="boardNo" column="BOARD_NO"/>
      <result property="memberNo" column="MEMBER_NO"/>
      <result property="commentDeleteFlag" column="COMMENT_DEL_FL"/>
      <result property="parentNo" column="PARENT_NO"/>
      <result property="memberNickname" column="MEMBER_NICKNAME"/>
      <result property="profileImage" column="PROFILE_IMG"/>
   </resultMap>
	
	
	
	
	
	
	
	
	<insert id="boardInsert" parameterType="Board" useGeneratedKeys="true">
		<selectKey order="BEFORE" resultType="_int" keyProperty="boardNo">
			SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
		</selectKey>
       	INSERT INTO BOARD 
       	VALUES( #{boardNo},
              #{boardTitle},
              #{boardContent},
              DEFAULT, DEFAULT, DEFAULT, DEFAULT, 
              #{memberNo}, 
              #{boardCode})
	
	</insert>
	
	
	   <!-- 동적 SQL 중 <foreach> 
      - 특정 SLQ 구문을 반복할 때 사용
      - 반복되는 사이에 구분자(separator)를 추가할 수 있음.
      
      collection : 반복할 객체의 타입 작성(list, set, map...)
      item : collection에서 순차적으로 꺼낸 하나의 요소를 저장하는 변수
      index : 현재 반복 접근중인 인덱스 (0,1,2,3,4 ..)
      
      open : 반복 전에 출력할 sql
      close : 반복 종료 후에 출력한 sql
      
      separator : 반복 사이사이 구분자
    -->
	
	<!-- 이미지 여러개 삽입  -->
	<insert id="insertImageList" parameterType="list" >
	INSERT INTO "BOARD_IMG" 
SELECT SEQ_IMG_NO.NEXTVAL, A.*
FROM (
	
	<foreach collection="list" item="img" separator=" UNION ALL ">
	
SELECT #{img.imagePath} IMG_PATH, #{img.imageReName} IMG_RENAME, #{img.imageOriginal} IMG_ORGINAL,
		#{img.imageOrder} IMG_ORDER, #{img.boardNo} BOARD_NO
FROM DUAL

	</foreach>
)A

	
	</insert>
	
	<update id="boardUpdate">
	UPDATE "BOARD" SET
	BOARD_TITLE = #{boardTitle},
	BOARD_CONTENT = #{boardContent},
	B_UPDATE_DATE = SYSDATE 
	WHERE BOARD_CODE = #{boardCode}
	AND BOARD_NO = #{boardNo}
	</update>
	
	
	<!-- 이미지 삭제  -->
	
	<delete id="imageDelete">
	DELETE FROM "BOARD_IMG"
	WHERE BOARD_NO = #{boardNo}
	AND IMG_ORDER IN(${deleteList)
	</delete>
	
	<update id="imageUpdate">
	UPDATE "BOARD_IMG" SET
	IMG_PATH = #{imagePath},
	IMG_ORIGINAL = #{imageOriginal},
	IMG_RENAME = #{imageReName}
	WHERE BOARD_NO = #{boardNo}
	AND IMG_ORDER = #{imageOrder}
	</update>
	
	<!-- 이미지 삽입  -->
	<insert id="imgInsert">
	INSERT INTO "BOARD_IMG"
	VALUES(SEQ_IMG_NO.NEXTVAL,#{imagePath},#{imageReName},
	#{imageOriginal},#{imageOrder},#{boardNo})
	
	</insert>
	
	<update id="boardDelete">
	UPDATE "BOARD" SET
	BOARD_DEL_FL = 'Y'
	WHERE BOARD_NO =#{boardNo}
	AND BOARD_CODE = #{boardCode}
	</update>
	
	
	
	
	
	
	
	
</mapper>
